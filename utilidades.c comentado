#include "utilidades.h"
#include "Juego.h"
#include <string.h>

int cmpNombres(const void* a, const void* b)
{
    return strcmp((((tJugador*)a)->nombre), (((tJugador*)b)->nombre));
}

void normalizar_minusculas(char* str)
{
    while (*str != '\0') {
        *str = tolower((unsigned char)*str);  // Convertir a minúsculas
        str++;  // Mover al siguiente carácter
    }
}

///es nuestro cmp para sacar el mejor ordenarLista
int compararPuntajeTotal(const void* a, const void* b)
{
    return ((tJugador*)a)->puntaje < ((tJugador*)b)->puntaje ? 1 : -1;
}

int compararPuntajeTotalIgual(const void* a, const void* b)
{
    return ((tJugador*)a)->puntaje == ((tJugador*)b)->puntaje ? 1 : 0;
}

///Es el accion que utilizamos en la función mostrarEnOrdenJugadores
void mostrarJugador(const void* a,const void* b)
{
    int* posicion= (int*)b;
    tJugador* jugador=(tJugador*)a;
    printf("%d-%s\n",*posicion,jugador->nombre);
}

///esta función actualiza la info de un jugador, sumando el puntaje total y registradon la fecha de su última partida jugada
void actualizarJugador(void *a, void *b){
    tJugadorAPI *aa = (tJugadorAPI *) a;
    tJugadorAPI *bb = (tJugadorAPI *) b;

    aa->puntaje += bb->puntaje;
    strcpy(aa->fyh, bb->fyh);
}

///Es la acción de mostrar un jugador con su posición en la lista, con sus datos
void mostrarJugadorAPI(const void *a, const void *b){
    tJugadorAPI *aa = (tJugadorAPI *) a;
    int posicion = *(int *) b;
    printf("%02d - Jugador: %-15s - Puntaje total: %3d \t- Ultima partida: %20s\n", posicion, aa->nombre, aa->puntaje, aa->fyh);
}

///Esta función se encarga de ordenar jugadores según:
///Nombre (orden alfabético).
///Puntaje (mayor puntaje primero).
///Fecha y hora de la última partida (más reciente primero en caso de empate).
int compararJugAPI(const void *a, const void *b){
    tJugadorAPI *aa = (tJugadorAPI *) a;
    tJugadorAPI *bb = (tJugadorAPI *) b;
    tFechaHora fecha1, fecha2;


    int resultado = strcmp(aa->nombre, bb->nombre);
    if( resultado != 0){
        resultado = aa->puntaje - bb->puntaje;
        if ( resultado == 0){

            sscanf(aa->fyh, "%2d/%2d/%4d %2d:%2d:%2d",
                   &fecha1.dia,
                   &fecha1.mes,
                   &fecha1.anio,
                   &fecha1.hora,
                   &fecha1.minutos,
                   &fecha1.segundos);


            sscanf(bb->fyh, "%2d/%2d/%4d %2d:%2d:%2d",
                   &fecha2.dia,
                   &fecha2.mes,
                   &fecha2.anio,
                   &fecha2.hora,
                   &fecha2.minutos,
                   &fecha2.segundos);

            resultado = fecha1.anio - fecha2.anio;
            if(resultado == 0){
                resultado = fecha1.mes - fecha2.mes;
                if(resultado == 0){
                    resultado = fecha1.dia - fecha2.dia;
                    if(resultado == 0){
                        resultado = fecha1.hora - fecha2.hora;

                        if(resultado == 0){
                            resultado = fecha1.minutos - fecha2.minutos;

                            if(resultado == 0){
                                resultado = fecha1.segundos - fecha2.segundos;
                            } else {
                                return 1;
                            }
                        }
                    }
                }
            }

        }
    }
    ///Retornamos el resultado final
    return resultado;
}

